{"version":3,"sources":["ng://ng-scroll-detector/lib/ng-scroll-detector.service.ts","ng://ng-scroll-detector/lib/ng-scroll-detector.component.ts","ng://ng-scroll-detector/lib/ng-scroll.directive.ts","ng://ng-scroll-detector/lib/ng-scroll-detector.module.ts"],"names":["NgScrollDetectorService","Injectable","args","providedIn","NgScrollDetectorComponent","this","ifScroll","EventEmitter","prototype","ngOnInit","ngAfterViewChecked","ifScrollBar","ngOnChanges","changes","propName","chng","cur","JSON","stringify","currentValue","prev","previousValue","console","log","elementId","error","el","document","getElementById","hs","scrollWidth","clientWidth","vs","scrollHeight","clientHeight","scrollBar","elClientWidth","elScrollWidth","elScrollHeight","elClientHeight","isVs","isHs","emit","Component","selector","template","Input","Output","elemntscrollTracker","scrolled","onScroll","event","tracker","target","endReachedVerticle","endReachedHorizontal","limitVerticle","limitHorizontal","scrollTop","scrollLeft","posVerticle","posHorizontal","Directive","HostListener","htmlbodyscrollTracker","bodyscrolled","verticalOffset","window","pageYOffset","documentElement","body","HorizontalOffset","pageXOffset","NgScrollDetectorModule","NgModule","declarations","imports","CommonModule","BrowserModule","FormsModule","ReactiveFormsModule","exports"],"mappings":"weAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WAYE,SAAAA,IADUC,KAAAC,SAA8B,IAAIC,EAAAA,aAuC9C,OApCEH,EAAAI,UAAAC,SAAA,aAIAL,EAAAI,UAAAE,mBAAA,WACEL,KAAKM,eAEPP,EAAAI,UAAAI,YAAA,SAAYC,GACZ,IAAK,IAAIC,KAAYD,EAAS,KACxBE,EAAOF,EAAQC,GACfE,EAAOC,KAAKC,UAAUH,EAAKI,cAC3BC,EAAOH,KAAKC,UAAUH,EAAKM,eAC/BC,QAAQC,IAAI,UAAWH,EAAKJ,KAI9BZ,EAAAI,UAAAG,YAAA,WACE,IAAIN,KAAKmB,UAeP,MAAMF,QAAQG,MAAM,2DAdhBC,EAAKC,SAASC,eAAe,GAAGvB,KAAKmB,WACzCF,QAAQC,IAAIlB,KAAKmB,eACbK,EAAKH,EAAGI,YAAcJ,EAAGK,YACzBC,EAAKN,EAAGO,aAAeP,EAAGQ,aAC1BC,EAAY,CACdC,cAAeV,EAAGI,YAClBO,cAAeX,EAAGK,YAClBO,eAAgBZ,EAAGO,aACnBM,eAAgBb,EAAGQ,aACnBM,KAAMR,EACNS,KAAMZ,GAERxB,KAAKC,SAASoC,KAAKP,wBA1CxBQ,EAAAA,UAASzC,KAAA,CAAC,CACT0C,SAAU,qBACVC,SAAU,mHAMTC,EAAAA,wBACAC,EAAAA,UAuCH3C,EAlDA,GCAA,IAAA4C,EAAA,WAEE,SAAAA,IAKY3C,KAAA4C,SAAW,IAAI1C,EAAAA,aA6B3B,OA1BEyC,EAAAxC,UAAA0C,SADA,SACSC,OAIHC,EAAUD,EAAME,OAChBC,GAAqB,EACrBC,GAAuB,EACvBC,EAAgBJ,EAAQnB,aAAemB,EAAQlB,aAC/CuB,EAAkBL,EAAQtB,YAAcsB,EAAQrB,YAGhDoB,EAAME,OAAOK,YAAcF,IAE7BF,GAAqB,GAEnBH,EAAME,OAAOM,aAAeF,IAE9BF,GAAuB,GAEzBlD,KAAK4C,SAASP,KAAK,CACjBkB,YAAaT,EAAME,OAAOK,UAC1BJ,mBAAkBA,EAClBO,cAAcV,EAAME,OAAOM,WAC3BJ,qBAAoBA,yBA/BzBO,EAAAA,UAAS5D,KAAA,CAAC,CACT0C,SAAU,8DAITG,EAAAA,yBAEAgB,EAAAA,aAAY7D,KAAA,CAAC,SAAU,CAAC,cA2B3B8C,EApCF,GAqCE,IAAAgB,EAAA,WAAA,SAAAA,IAIY3D,KAAA4D,aAAe,IAAI1D,EAAAA,aAe/B,OAbEyD,EAAAxD,UAAA0C,SADA,SACSC,OACCe,EAAiBC,OAAOC,aACzBzC,SAAS0C,gBAAgBX,WACzB/B,SAAS2C,KAAKZ,WAAa,EACzBa,EAAmBJ,OAAOK,aAC5B7C,SAAS0C,gBAAgBV,YACzBhC,SAAS2C,KAAKX,YAAc,EAEnCtD,KAAK4D,aAAavB,KAAK,CACnBwB,eAAcA,EACdK,iBAAgBA,yBAhBvBT,EAAAA,UAAS5D,KAAA,CAAC,CACT0C,SAAU,oEAGTG,EAAAA,yBACAgB,EAAAA,aAAY7D,KAAA,CAAC,gBAAiB,CAAC,cAclC8D,EAnBA,GCrCF,IAAAS,EAAA,WAQA,SAAAA,KAOsC,2BAPrCC,EAAAA,SAAQxE,KAAA,CAAC,CACRyE,aAAc,CAACvE,EAA2B4C,EAAoBgB,GAC9DY,QAAS,CACPC,EAAAA,aAAcC,EAAAA,cAAcC,EAAAA,YAAYC,EAAAA,qBAE1CC,QAAS,CAAC7E,EAA0B4C,EAAoBgB,OAEpBS,EAftC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgScrollDetectorService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, AfterViewChecked, OnChanges, SimpleChange, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'ng-scroll-detector',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: []\n})\nexport class NgScrollDetectorComponent implements OnInit, AfterViewChecked, OnChanges {\n  @Input() elementId: string;\n  @Output() ifScroll: EventEmitter<any> = new EventEmitter<any>();\n  constructor() { }\n\n  ngOnInit() {\n    // console.log(this.elementId);\n    // this.elementId = \"test\";\n  }\n  ngAfterViewChecked() {\n    this.ifScrollBar();\n  }\n  ngOnChanges(changes: SimpleChanges) {\n  for (let propName in changes) {\n    let chng = changes[propName];\n    let cur  = JSON.stringify(chng.currentValue);\n    let prev = JSON.stringify(chng.previousValue);\n    console.log('Changes'+ prev,cur)\n   // this.changeLog.push(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\n  }\n}\n  ifScrollBar() {\n    if (this.elementId) {\n      let el = document.getElementById(`${this.elementId}`);\n      console.log(this.elementId);\n      let hs = el.scrollWidth > el.clientWidth;\n      let vs = el.scrollHeight > el.clientHeight;\n      let scrollBar = {\n        elClientWidth: el.scrollWidth,\n        elScrollWidth: el.clientWidth,\n        elScrollHeight: el.scrollHeight,\n        elClientHeight: el.clientHeight,\n        isVs: vs,\n        isHs: hs\n      }\n      this.ifScroll.emit(scrollBar);\n    } else {\n      throw console.error('Element not found, specify element to detect scroll');\n    }\n  }\n\n}","import {Directive, HostListener, Output, EventEmitter}from '@angular/core';\n  \n  @Directive({\n    selector: '[elemntscrollTracker]',\n  })\n  \n  export class elemntscrollTracker {\n    @Output() scrolled = new EventEmitter<any>();\n  \n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n      // do tracking\n      // console.log('scrolled', event.target.scrollTop);\n      // Listen to click events in the component\n      let tracker = event.target;\n      let endReachedVerticle = false;\n      let endReachedHorizontal = false;\n      let limitVerticle = tracker.scrollHeight - tracker.clientHeight;\n      let limitHorizontal = tracker.scrollWidth - tracker.clientWidth;\n      // alert(event.target.scrollLeft);\n     // console.log(event.target.scrollTop, limitVerticle);\n      if (event.target.scrollTop === limitVerticle) {\n        // alert('end reached');\n        endReachedVerticle = true;\n      }\n      if (event.target.scrollLeft === limitHorizontal) {\n        // alert('end reached bottom');\n        endReachedHorizontal = true;\n      }\n      this.scrolled.emit({\n        posVerticle: event.target.scrollTop,\n        endReachedVerticle,\n        posHorizontal:event.target.scrollLeft,\n        endReachedHorizontal\n      })\n    }\n  }\n  @Directive({\n    selector: '[htmlbodyscrollTracker]',\n  })\n  export class htmlbodyscrollTracker {\n    @Output() bodyscrolled = new EventEmitter<any>();\n    @HostListener('window:scroll', ['$event'])\n    onScroll(event) {\n        const verticalOffset = window.pageYOffset \n          || document.documentElement.scrollTop \n          || document.body.scrollTop || 0;\n         const HorizontalOffset = window.pageXOffset \n          || document.documentElement.scrollLeft\n          || document.body.scrollLeft || 0;\n      \n      this.bodyscrolled.emit({\n          verticalOffset,\n          HorizontalOffset,\n      })\n    }\n  }","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgScrollDetectorComponent } from './ng-scroll-detector.component';\nimport { elemntscrollTracker,htmlbodyscrollTracker } from './ng-scroll.directive';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule,ReactiveFormsModule  } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [NgScrollDetectorComponent, elemntscrollTracker,htmlbodyscrollTracker],\n  imports: [\n    CommonModule, BrowserModule,FormsModule,ReactiveFormsModule\n  ],\n  exports: [NgScrollDetectorComponent,elemntscrollTracker,htmlbodyscrollTracker]\n})\nexport class NgScrollDetectorModule { }\n"]}